{"version":3,"sources":["webpack://cmdb-[name]/./src/views/cmdb/components/bind-host.vue","webpack://cmdb-[name]/src/views/cmdb/components/bind-host.vue","webpack://cmdb-[name]/./src/views/cmdb/components/bind-host.vue?a0c5","webpack://cmdb-[name]/./src/views/cmdb/components/bind-host.vue?5bab","webpack://cmdb-[name]/./src/api/cloud/server.js"],"names":["render","_vm","this","_c","_self","attrs","model","value","dialog","show","callback","$$v","$set","expression","_v","_s","totalCount","staticStyle","on","handleFilter","nativeOn","$event","type","indexOf","_k","keyCode","key","apply","arguments","searchVal","ref","columnsData","tableData","pageNum","pageSize","handlerChangePage","staticRenderFns","name","props","Object","default","data","serverList","serverFilteredList","boundServerIds","agentInstanceId","pageTotal","title","align","minWidth","sortable","width","h","params","status","row","has_main_agent","color","isBound","is_bound_to_this_agent","agent_id","includes","id","size","style","marginRight","click","setMainAgent","computed","length","watch","newVal","initData","setCurrentPageData","methods","handleConfirm","currentRow","$emit","processServerData","servers","agentId","Array","isArray","sortedServers","boundServers","filter","server","map","allServersWithBindFlag","sort","a","b","loadServerData","agent_instance_id","$Message","error","showConfirmDialog","Promise","resolve","reject","$Modal","confirm","marginTop","display","alignItems","onOk","set_main_agent","updateMainAgent","success","onCancel","showSetMainConfirm","setAsMain","server_id","main_agent","res","optServerMainAgent","code","Error","msg","bind_agnet_status","message","begin","end","slice","checkRegion","item","region","checkExecList","cloud_name","inner_ip","trim","component","getServerList","request","url","method","optServer","optBatchServer","getUserField","optrationUserField"],"mappings":"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","file":"static/js/chunk-a3ac49b4.7dad91ed.js","sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('Modal',{attrs:{\"title\":\"选择主机\",\"width\":\"950\",\"mask-closable\":false,\"footer-hide\":true},model:{value:(_vm.dialog.show),callback:function ($$v) {_vm.$set(_vm.dialog, \"show\", $$v)},expression:\"dialog.show\"}},[_c('alert',[_vm._v(\"一共查询到:\"+_vm._s(_vm.totalCount)+\"条数据\")]),_c('Input',{staticStyle:{\"width\":\"330px\",\"margin\":\"0px\"},attrs:{\"clearable\":\"\",\"placeholder\":\"输入实例ID、主机名、内网IP搜索\",\"search\":\"\"},on:{\"on-change\":_vm.handleFilter},nativeOn:{\"keydown\":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,\"enter\",13,$event.key,\"Enter\"))return null;return _vm.handleFilter.apply(null, arguments)}},model:{value:(_vm.searchVal),callback:function ($$v) {_vm.searchVal=$$v},expression:\"searchVal\"}}),_c('div',{staticStyle:{\"margin-top\":\"5px\"}},[_c('Table',{ref:\"table\",attrs:{\"highlight-row\":\"\",\"stripe\":\"\",\"size\":\"small\",\"columns\":_vm.columnsData,\"data\":_vm.tableData}})],1),_c('div',{staticStyle:{\"margin\":\"10px\",\"overflow\":\"hidden\"}},[_c('Page',{attrs:{\"total\":_vm.totalCount,\"current\":_vm.pageNum,\"page-size\":_vm.pageSize,\"show-total\":\"\"},on:{\"on-change\":_vm.handlerChangePage}})],1)],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<!-- eslint-disable vue/no-mutating-props -->\n<template>\n  <div>\n    <Modal v-model=\"dialog.show\" title=\"选择主机\" width=\"950\" :mask-closable=\"false\" :footer-hide=\"true\">\n      <alert>一共查询到:{{ totalCount }}条数据</alert>\n      <Input v-model=\"searchVal\" style=\"width: 330px; margin: 0px\" clearable placeholder=\"输入实例ID、主机名、内网IP搜索\"\n        @keydown.enter.native=\"handleFilter\" @on-change=\"handleFilter\" search />\n\n      <div style=\"margin-top: 5px\">\n        <Table highlight-row stripe size=\"small\" :columns=\"columnsData\" :data=\"tableData\" ref=\"table\"/>\n      </div>\n\n      <div style=\"margin: 10px; overflow: hidden\">\n        <Page :total=\"totalCount\" :current=\"pageNum\" :page-size=\"pageSize\" show-total @on-change=\"handlerChangePage\" />\n      </div>\n    </Modal>\n  </div>\n</template>\n<script>\nimport { optServerMainAgent } from '@/api/cloud/server.js'\nimport { on } from 'codemirror';\nimport { color } from 'echarts/lib/export';\nexport default {\n  name: \"BindHost\",\n  props: {\n    dialog: {\n      type: Object,\n      default: {},\n    },\n  },\n  data() {\n    return {\n      serverList: [], // 初始总数\n      serverFilteredList: [],\n      boundServerIds: [], \n      tableData: [],\n      searchVal: \"\",\n      agentInstanceId: 0,\n      pageTotal: 0,\n      pageSize: 10,\n      pageNum: 1,\n      columnsData: [\n        {\n          title: \"实例名称\",\n          key: \"name\",\n          align: \"center\",\n          minWidth: 100,\n          sortable: true,\n        },\n        {\n          title: \"内网IP\",\n          key: \"inner_ip\",\n          align: \"center\",\n          width: 140,\n\n          sortable: true,\n        },\n        {\n          title: \"可用区\",\n          key: \"region\",\n          align: \"center\",\n          width: 140,\n          sortable: true,\n        },\n        {\n          title: \"厂商\",\n          key: \"cloud_name\",\n          align: \"center\",\n          width: 140,\n          sortable: true,\n        },\n        {\n          title: \"是否有主agent\",\n          key: \"has_main_agent\",\n          align: \"center\",\n          width: 140,\n          sortable: true,\n          render: (h, params) => {\n            const status = params.row.has_main_agent;\n            if (status === true) {\n              return h('div', [\n                h(\n                  'Tag',\n                  {\n                    props: { color: '#19be6b' },\n                  },\n                  '是',\n                ),\n              ])\n            } else {\n              return h('div', [\n                h(\n                  'Tag',\n                  {\n                    props: { color: '#ed3f14' },\n                  },\n                  '否',\n                ),\n              ])\n            }\n          },\n        },\n        {\n          title: '操作',\n          key: 'action',\n          width: 150,\n          align: 'center',\n          render: (h, params) => {\n            // 检查当前行是否已绑定\n            const isBound = params.row.is_bound_to_this_agent ||\n              (params.row.agent_id &&\n                this.boundServerIds.includes(params.row.id));\n\n            return h('div', [\n              isBound ?\n                // 已绑定 - 显示禁用的\"已绑定\"按钮\n                h('Button', {\n                  props: {\n                    type: 'success',\n                    size: 'small',\n                    // disabled: true\n                  },\n                  style: {\n                    marginRight: '5px'\n                  },\n                  on: {\n                    click: () => {\n                      this.setMainAgent(params.row);\n                    }\n                  }\n                }, '已绑定')\n                :\n                // 未绑定 - 显示\"绑定\"按钮\n                h('Button', {\n                  props: {\n                    type: 'primary',\n                    size: 'small'\n                  },\n                  style: {\n                    marginRight: '5px'\n                  },\n                  on: {\n                    click: () => {\n                      this.setMainAgent(params.row);\n                    }\n                  }\n                }, '绑定')\n            ]);\n          }\n        }\n      ],\n    }\n  },\n  computed: {\n    totalCount() {\n      return this.serverFilteredList.length\n    },\n  },\n  watch: {\n    \"dialog.show\": function (newVal) {\n      if (newVal) {\n        this.initData()\n        this.setCurrentPageData()\n      }\n    },\n  },\n  methods: {\n    handleConfirm() {\n      if (this.currentRow) {\n        this.$emit('on-select', this.currentRow);\n        this.dialog.show = false;\n      }\n    },\n    /**\n * 处理服务器数据，标记绑定状态并排序\n * @param {Array} servers 服务器数据列表\n * @param {string} agentId 当前Agent ID\n * @returns {Object} 包含处理后的数据和绑定ID列表\n */\n    processServerData(servers, agentId) {\n      if (!servers || !Array.isArray(servers)) {\n        return {\n          sortedServers: [],\n          boundServerIds: []\n        };\n      }\n\n      // 获取绑定主机的ID列表\n      const boundServers = servers.filter(server => server.agent_id === agentId);\n      const boundServerIds = boundServers.map(server => server.id);\n\n      // 对所有主机标记绑定状态\n      const allServersWithBindFlag = servers.map(server => ({\n        ...server,\n        // 标记是否已绑定到当前Agent\n        is_bound_to_this_agent: server.agent_id === agentId,\n      }));\n\n      // 排序：已绑定的主机放在前面\n      const sortedServers = allServersWithBindFlag.sort((a, b) => {\n        // 已绑定的排在前面\n        if (a.is_bound_to_this_agent && !b.is_bound_to_this_agent) return -1;\n        if (!a.is_bound_to_this_agent && b.is_bound_to_this_agent) return 1;\n        // 如果绑定状态相同，按ID排序\n        return a.id - b.id;\n      });\n\n      return {\n        sortedServers,\n        boundServerIds\n      };\n    },\n\n    /**\n     * 加载并处理服务器数据\n     * @param {Array} servers 服务器数据列表\n     * @param {string} agentId 当前Agent ID\n     */\n    loadServerData(servers, agentId, agent_instance_id) {\n      if (!servers || !agentId) {\n        this.$Message.error('无效的数据参数');\n        return;\n      }\n\n      // 处理服务器数据\n      const { sortedServers, boundServerIds } = this.processServerData(servers, agentId);\n\n      // 更新组件数据\n      this.serverList = sortedServers;\n      this.boundServerIds = boundServerIds;\n      this.agentInstanceId = agent_instance_id;\n\n      // 重新过滤和分页\n      this.initData();\n      this.setCurrentPageData();\n    },                                                                                                                    \n    /**\n     * 显示确认对话框\n     * @param {Object} row 行数据\n     * @returns {Promise<void>}\n     */\n    showConfirmDialog(row) {\n      let setMainAgent = false;\n      return new Promise((resolve, reject) => {\n        this.$Modal.confirm({\n          title: '确认修改',\n          render: (h) => {\n            return h('div', [\n              // 主要提示内容\n              h('p', '当前该主机已绑定主agent，请确认是否将本agent设为主agent？'),\n\n              // 添加复选框\n              h('div', {\n                style: {\n                  marginTop: '16px',\n                  display: 'flex',\n                  alignItems: 'center'\n                }\n              }, [\n                h('Checkbox', {\n                  props: {\n                    value: setMainAgent\n                  },\n                  on: {\n                    'on-change': (value) => {\n                      setMainAgent = value;\n                    }\n                  },\n                  style: {\n                    marginRight: '8px'\n                  }\n                }),\n                h('span', '设为主agent')\n              ])\n            ]);\n          },\n          onOk: async () => {\n            try {\n              row.set_main_agent = setMainAgent;\n              await this.updateMainAgent(row, setMainAgent);\n              resolve({ success: true, setMainAgent: setMainAgent });\n            } catch (error) {\n              reject(error);\n            }\n          },\n          onCancel: () => {\n            resolve();\n          }\n        });\n      });\n    },\n    /**\n * 显示设置主 Agent 确认对话框\n * @param {Object} row 行数据\n * @returns {Promise<void>}\n */\n    showSetMainConfirm(row) {\n      return new Promise((resolve, reject) => {\n        // 默认不设为主 agent\n        let setAsMain = false;\n\n        this.$Modal.confirm({\n          title: '确认修改',\n          // 使用 render 函数自定义内容\n          render: (h) => {\n            return h('div', [\n              // 主要提示内容\n              h('p', '请确认是否将本agent绑定到该主机，并设置为主agent？'),\n\n              // 添加复选框\n              h('div', {\n                style: {\n                  marginTop: '16px',\n                  display: 'flex',\n                  alignItems: 'center'\n                }\n              }, [\n                h('Checkbox', {\n                  props: {\n                    value: setAsMain\n                  },\n                  on: {\n                    'on-change': (value) => {\n                      setAsMain = value;\n                    }\n                  },\n                  style: {\n                    marginRight: '8px'\n                  }\n                }),\n                h('span', '设为主agent')\n              ])\n            ]);\n          },\n          onOk: async () => {\n            try {\n              // 传递勾选状态\n              await this.updateMainAgent(row, setAsMain);\n              resolve({ success: true, setAsMain });\n            } catch (error) {\n              reject(error);\n            }\n          },\n          onCancel: () => {\n            resolve({ success: false, setAsMain: false });\n          }\n        });\n      });\n    },\n    /**\n     * 更新主 Agent\n     * @param {Object} row 行数据\n     * @returns {Promise<void>}\n     */\n    async updateMainAgent(row, setAsMain) {\n      try {\n        const data = {\n          server_id: row.id,\n          agent_instance_id: this.agentInstanceId,\n          main_agent: setAsMain\n        };\n\n        const res = await optServerMainAgent(data, 'post');\n\n        if (res.code === 0) {\n          this.$Message.success('设置成功');\n          this.dialog.show = false;\n          // 触发刷新\n          this.$emit(\"refresh\")\n          this.$emit('bind-complete'); \n        } else {\n          throw new Error(res.msg || '操作失败');\n        }\n      } catch (error) {\n        throw error;\n      }\n    },\n    /**\n     * 设置主 Agent\n     * @param {Object} row 行数据\n     * @returns {Promise<void>}\n     */\n    async setMainAgent(row) {\n      try {\n        if (row.has_main_agent && row.bind_agnet_status !== 0) {\n          // 如果已有主 agent，则弹出确认气泡\n          await this.showConfirmDialog(row);\n        } else {\n          // 如果没有主 agent，直接设为主 agent\n          await this.showSetMainConfirm(row);\n        }\n      } catch (error) {\n        this.$Message.error(`设置主Agent失败: ${error.message}`);\n      }\n    },\n    handlerChangePage(value) {\n      this.pageNum = value\n      this.setCurrentPageData()\n    },\n    // 分页处理\n    setCurrentPageData() {\n      const begin = (this.pageNum - 1) * this.pageSize\n      const end = this.pageNum * this.pageSize\n      this.tableData = this.serverFilteredList.slice(begin, end)\n    },\n    checkRegion(item) {\n      return item.region.indexOf(this.region) >= 0\n    },\n    checkExecList(item) {\n      return (item.name.indexOf(this.searchVal) >= 0) || (item.cloud_name.indexOf(this.searchVal) >= 0 || (item.inner_ip && item.inner_ip.indexOf(this.searchVal) >= 0) || (item.region && item.region.indexOf(this.searchVal) >= 0))\n    },\n    // 前端搜索和筛选\n    handleFilter() {\n      this.pageNum = 1\n      if (this.searchVal) {\n        this.searchVal = this.searchVal.trim()\n        this.serverFilteredList = this.serverList.filter(this.checkExecList)\n      } else {\n        this.serverFilteredList = this.serverList\n      }\n\n      this.setCurrentPageData()\n    },\n    initData() {\n      this.serverFilteredList = this.serverList\n      this.pageNum = 1\n      this.pageSize = 10\n      this.searchVal = \"\"\n    },\n  },\n}\n</script>","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./bind-host.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./bind-host.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./bind-host.vue?vue&type=template&id=27b61bb2&\"\nimport script from \"./bind-host.vue?vue&type=script&lang=js&\"\nexport * from \"./bind-host.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","/* eslint-disable camelcase */\nimport request from '@/plugins/axios'\n\n// 主机\nexport const getServerList = (params) => request({\n  url: '/api/v2/cmdb/server/',\n  method: 'get',\n  params,\n})\n\nexport const optServer = (data, method) => request({\n  url: '/api/v2/cmdb/server/',\n  method,\n  data,\n})\n\nexport const optBatchServer = (data, method) => request({\n  url: '/api/v2/cmdb/server/batch/',\n  method,\n  data,\n})\n\n// 用戶收藏字段\nexport const getUserField = (params) => request({\n  url: '/api/v2/cmdb/user_field/',\n  method: 'get',\n  params,\n})\n\nexport const optrationUserField = (data) => request({\n  url: '/api/v2/cmdb/user_field/',\n  method: 'put',\n  data,\n})\n\nexport const optServerMainAgent = (data, method) => request({\n  url: '/api/v2/cmdb/server/main_agent/',\n  method,\n  data,\n})"],"sourceRoot":""}