{"version":3,"sources":["webpack://cmdb-[name]/./src/components/charts/tools.js"],"names":["forEach","arr","fn","length","i","len","item","getIntersection","arr1","arr2","Math","min","res","indexOf","push","getUnion","Array","from","Set","hasOneOf","targetarr","some","_","oneOf","value","validList","isMillisecond","timeStamp","timeStr","String","isEarly","currentTime","getHandledValue","num","getDate","startType","d","Date","year","getFullYear","month","getMonth","date","hours","getHours","minutes","getMinutes","second","getSeconds","resStr","getRelativeTime","IS_MILLISECOND","floor","Number","parse","IS_EARLY","diff","dirStr","getExplorer","ua","window","navigator","userAgent","isExplorer","exp","on","document","addEventListener","element","event","handler","attachEvent","off","removeEventListener","detachEvent","hasKey","obj","key","keysArr","Object","keys","objEqual","obj1","obj2","keysArr1","keysArr2"],"mappings":"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","file":"static/js/chunk-2d22d70a.a9804b78.js","sourcesContent":["export const forEach = (arr, fn) => {\n  if (!arr.length || !fn) return\n  let i = -1\n  let len = arr.length\n  while (++i < len) {\n    let item = arr[i]\n    fn(item, i, arr)\n  }\n}\n\n/**\n * @param {Array} arr1\n * @param {Array} arr2\n * @description 得到两个数组的交集, 两个数组的元素为数值或字符串\n */\nexport const getIntersection = (arr1, arr2) => {\n  let len = Math.min(arr1.length, arr2.length)\n  let i = -1\n  let res = []\n  while (++i < len) {\n    const item = arr2[i]\n    if (arr1.indexOf(item) > -1) res.push(item)\n  }\n  return res\n}\n\n/**\n * @param {Array} arr1\n * @param {Array} arr2\n * @description 得到两个数组的并集, 两个数组的元素为数值或字符串\n */\nexport const getUnion = (arr1, arr2) => {\n  return Array.from(new Set([...arr1, ...arr2]))\n}\n\n/**\n * @param {Array} target 目标数组\n * @param {Array} arr 需要查询的数组\n * @description 判断要查询的数组是否至少有一个元素包含在目标数组中\n */\nexport const hasOneOf = (targetarr, arr) => {\n  return targetarr.some(_ => arr.indexOf(_) > -1)\n}\n\n/**\n * @param {String|Number} value 要验证的字符串或数值\n * @param {*} validList 用来验证的列表\n */\nexport function oneOf (value, validList) {\n  for (let i = 0; i < validList.length; i++) {\n    if (value === validList[i]) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * @param {Number} timeStamp 判断时间戳格式是否是毫秒\n * @returns {Boolean}\n */\nconst isMillisecond = timeStamp => {\n  const timeStr = String(timeStamp)\n  return timeStr.length > 10\n}\n\n/**\n * @param {Number} timeStamp 传入的时间戳\n * @param {Number} currentTime 当前时间时间戳\n * @returns {Boolean} 传入的时间戳是否早于当前时间戳\n */\nconst isEarly = (timeStamp, currentTime) => {\n  return timeStamp < currentTime\n}\n\n/**\n * @param {Number} num 数值\n * @returns {String} 处理后的字符串\n * @description 如果传入的数值小于10，即位数只有1位，则在前面补充0\n */\nconst getHandledValue = num => {\n  return num < 10 ? '0' + num : num\n}\n\n/**\n * @param {Number} timeStamp 传入的时间戳\n * @param {Number} startType 要返回的时间字符串的格式类型，传入'year'则返回年开头的完整时间\n */\nconst getDate = (timeStamp, startType) => {\n  const d = new Date(timeStamp * 1000)\n  const year = d.getFullYear()\n  const month = getHandledValue(d.getMonth() + 1)\n  const date = getHandledValue(d.getDate())\n  const hours = getHandledValue(d.getHours())\n  const minutes = getHandledValue(d.getMinutes())\n  const second = getHandledValue(d.getSeconds())\n  let resStr = ''\n  if (startType === 'year') resStr = year + '-' + month + '-' + date + ' ' + hours + ':' + minutes + ':' + second\n  else resStr = month + '-' + date + ' ' + hours + ':' + minutes\n  return resStr\n}\n\n/**\n * @param {String|Number} timeStamp 时间戳\n * @returns {String} 相对时间字符串\n */\nexport const getRelativeTime = timeStamp => {\n  // 判断当前传入的时间戳是秒格式还是毫秒\n  const IS_MILLISECOND = isMillisecond(timeStamp)\n  // 如果是毫秒格式则转为秒格式\n  if (IS_MILLISECOND) Math.floor(timeStamp /= 1000)\n  // 传入的时间戳可以是数值或字符串类型，这里统一转为数值类型\n  timeStamp = Number(timeStamp)\n  // 获取当前时间时间戳\n  const currentTime = Math.floor(Date.parse(new Date()) / 1000)\n  // 判断传入时间戳是否早于当前时间戳\n  const IS_EARLY = isEarly(timeStamp, currentTime)\n  // 获取两个时间戳差值\n  let diff = currentTime - timeStamp\n  // 如果IS_EARLY为false则差值取反\n  if (!IS_EARLY) diff = -diff\n  let resStr = ''\n  const dirStr = IS_EARLY ? '前' : '后'\n  // 少于等于59秒\n  if (diff <= 59) resStr = diff + '秒' + dirStr\n  // 多于59秒，少于等于59分钟59秒\n  else if (diff > 59 && diff <= 3599) resStr = Math.floor(diff / 60) + '分钟' + dirStr\n  // 多于59分钟59秒，少于等于23小时59分钟59秒\n  else if (diff > 3599 && diff <= 86399) resStr = Math.floor(diff / 3600) + '小时' + dirStr\n  // 多于23小时59分钟59秒，少于等于29天59分钟59秒\n  else if (diff > 86399 && diff <= 2623859) resStr = Math.floor(diff / 86400) + '天' + dirStr\n  // 多于29天59分钟59秒，少于364天23小时59分钟59秒，且传入的时间戳早于当前\n  else if (diff > 2623859 && diff <= 31567859 && IS_EARLY) resStr = getDate(timeStamp)\n  else resStr = getDate(timeStamp, 'year')\n  return resStr\n}\n\n/**\n * @returns {String} 当前浏览器名称\n */\nexport const getExplorer = () => {\n  const ua = window.navigator.userAgent\n  const isExplorer = (exp) => {\n    return ua.indexOf(exp) > -1\n  }\n  if (isExplorer('MSIE')) return 'IE'\n  else if (isExplorer('Firefox')) return 'Firefox'\n  else if (isExplorer('Chrome')) return 'Chrome'\n  else if (isExplorer('Opera')) return 'Opera'\n  else if (isExplorer('Safari')) return 'Safari'\n}\n\n/**\n * @description 绑定事件 on(element, event, handler)\n */\nexport const on = (function () {\n  if (document.addEventListener) {\n    return function (element, event, handler) {\n      if (element && event && handler) {\n        element.addEventListener(event, handler, false)\n      }\n    }\n  } else {\n    return function (element, event, handler) {\n      if (element && event && handler) {\n        element.attachEvent('on' + event, handler)\n      }\n    }\n  }\n})()\n\n/**\n * @description 解绑事件 off(element, event, handler)\n */\nexport const off = (function () {\n  if (document.removeEventListener) {\n    return function (element, event, handler) {\n      if (element && event) {\n        element.removeEventListener(event, handler, false)\n      }\n    }\n  } else {\n    return function (element, event, handler) {\n      if (element && event) {\n        element.detachEvent('on' + event, handler)\n      }\n    }\n  }\n})()\n\n/**\n * 判断一个对象是否存在key，如果传入第二个参数key，则是判断这个obj对象是否存在key这个属性\n * 如果没有传入key这个参数，则判断obj对象是否有键值对\n */\nexport const hasKey = (obj, key) => {\n  if (key) return key in obj\n  else {\n    let keysArr = Object.keys(obj)\n    return keysArr.length\n  }\n}\n\n/**\n * @param {*} obj1 对象\n * @param {*} obj2 对象\n * @description 判断两个对象是否相等，这两个对象的值只能是数字或字符串\n */\nexport const objEqual = (obj1, obj2) => {\n  const keysArr1 = Object.keys(obj1)\n  const keysArr2 = Object.keys(obj2)\n  if (keysArr1.length !== keysArr2.length) return false\n  else if (keysArr1.length === 0 && keysArr2.length === 0) return true\n  /* eslint-disable-next-line */\n  else return !keysArr1.some(key => obj1[key] != obj2[key])\n}\n"],"sourceRoot":""}